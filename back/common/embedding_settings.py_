import json
from typing import Any

from pydantic import BaseModel, ValidationInfo, field_validator

type SettingsDictEntry = tuple[str, Any]
type SettingsDict = tuple[SettingsDictEntry, ...]

def _is_settings_dict_entry(
    v: Any) -> bool:  # noqa: ANN401
    if isinstance(v, tuple):
        v_tuple: tuple[Any, ...] = v
        return len(v_tuple) == 2 and isinstance(v_tuple[0], str)
    return False

def _is_settings_dict(
    v: Any) -> bool:  # noqa: ANN401
    if isinstance(v, tuple):
        v_tuple: tuple[Any, ...] = v
        return all(
            _is_settings_dict_entry(item) for item in v_tuple
        )
    return False



# Helper function for the conversion logic to keep the class DRY
def _to_settings_dict(
    v: Any, field_name: str,
) -> tuple[tuple[str, Any], ...]:
    """
    Converts a dictionary input (from JSON string, dict, or list/tuple of pairs)
    into a sorted tuple of (key, value) items for hashability.
    """
    parsed_dict: dict[str, Any]

    if isinstance(v, str):
        parsed_dict = json.loads(v)
    elif isinstance(v, dict):
        parsed_dict = v
    elif _is_settings_dict(v):
        return v
    else:
        # Input is not a recognizable format
        raise ValueError(
            f"{field_name} must be a JSON string representing a dictionary, "
            f"a Python dictionary, or a list/tuple of 2-element (key, value) "
            f"tuples. Received: {type(v)}",
        )

    # Convert dictionary to a sorted tuple of (key, value) items
    # Sorting by key ensures consistent order for hashing
    return tuple(sorted(parsed_dict.items()))


class EmbeddingSettings(BaseModel, frozen=True):
    litellm_model: str
    # The fields will store the kwargs as hashable tuples of (key, value) pairs
    litellm_query_kwargs: SettingsDict
    litellm_document_kwargs: SettingsDict

    @field_validator(
        "litellm_query_kwargs",
        "litellm_document_kwargs",
        mode="before",  # Validate before Pydantic's standard type checking for these fields
    )
    @classmethod
    def _validate_and_prepare_kwargs(
        cls, v: Any, info: ValidationInfo,  # noqa: ANN401
    ) -> tuple[tuple[str, Any], ...]:
        """
        Validates and converts input for kwarg fields (litellm_query_kwargs,
        litellm_document_kwargs) to a hashable tuple format.
        The `info.field_name` is used for more specific error messages.
        """
        return _to_settings_dict(v, field_name=info.field_name or "None")

    # Optional: Properties to easily get these back as dictionaries when needed
    @property
    def query_kwargs_as_dict(self) -> dict[str, Any]:
        """Returns litellm_query_kwargs as a standard dictionary."""
        return dict(self.litellm_query_kwargs)

    @property
    def document_kwargs_as_dict(self) -> dict[str, Any]:
        """Returns litellm_document_kwargs as a standard dictionary."""
        return dict(self.litellm_document_kwargs)
